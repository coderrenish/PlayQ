import fs from 'fs';
import path from 'path';

const stepGroupDir = path.resolve('test/_step_group');
const outputFilePath = path.resolve('test/steps/_step_group/stepGroup_steps.ts');

function extractStepGroups(): {
  groupName: string;
  description: string;
  steps: string[];
}[] {
  const groupPattern = /^@<([\w\-\.]+)\/>$/;
  const endGroupPattern = /^@<\/([\w\-\.]+)>$/;

  const stepGroupFiles = fs.readdirSync(stepGroupDir)
    .filter(file => /\.(steps\.feature|step\.feature|sg\.feature|steps\.sg\.feature)$/i.test(file));

  const stepGroups: {
    groupName: string;
    description: string;
    steps: string[];
  }[] = [];

  stepGroupFiles.forEach(file => {
    const fullPath = path.join(stepGroupDir, file);
    const fileContent = fs.readFileSync(fullPath, 'utf-8').trim().split('\n');
    let currentGroup = "";
    let groupDesc = "";
    const groupLines: string[] = [];

    fileContent.forEach(line => {
      const trimmedLine = line.trim();
      const startMatch = trimmedLine.match(groupPattern);
      const endMatch = trimmedLine.match(endGroupPattern);

      if (startMatch) {
        currentGroup = startMatch[1];
        groupDesc = "";
        return;
      }

      if (trimmedLine.startsWith('@desc:') && currentGroup) {
        groupDesc = trimmedLine.replace('@desc:', '').trim();
        return;
      }

      if (endMatch && endMatch[1] === currentGroup) {
        stepGroups.push({
          groupName: currentGroup,
          description: groupDesc,
          steps: [...groupLines]
        });
        currentGroup = "";
        groupDesc = "";
        groupLines.length = 0;
        return;
      }

      if (currentGroup && trimmedLine !== '') {
        groupLines.push(trimmedLine);
      }
    });
  });

  return stepGroups;
}

function generateStepDefinitions(stepGroups: {
  groupName: string;
  description: string;
  steps: string[];
}[]) {
  const lines: string[] = [];

  lines.push('// ************************** IMPORTANT **************************');
  lines.push('// This file is auto-generated by PlayQ for Step Group.');
  lines.push('// Do not edit it manually. File is auto-generated.');
  lines.push('// Any changes done directly will be lost on the next generation.');
  lines.push('// ***************************************************************');
  lines.push('');
  lines.push("import { Given } from '@cucumber/cucumber';");
  lines.push('');

  stepGroups.forEach(group => {
    lines.push(`Given('Step Group: -${group.groupName}- -${group.description}-', async function () {`);
    lines.push(`  console.log("Step Group: -${group.groupName}- <${group.description}>");`);
    lines.push('});');
    lines.push('');
  });

  fs.mkdirSync(path.dirname(outputFilePath), { recursive: true });
  fs.writeFileSync(outputFilePath, lines.join('\n'), 'utf-8');
  console.log(`✅ Step definitions generated: ${outputFilePath}`);
}

function run() {
  const stepGroups = extractStepGroups();
  if (stepGroups.length === 0) {
    console.warn('⚠️  No step groups found to generate.');
    return;
  }

  generateStepDefinitions(stepGroups);
}

run();